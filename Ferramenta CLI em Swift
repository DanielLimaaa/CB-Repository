import Foundation

func readFile(at path: String) -> String? {
    do {
        return try String(contentsOfFile: path, encoding: .utf8)
    } catch {
        print("Erro ao ler o arquivo: \(error.localizedDescription)")
        return nil
    }
}

func countWords(in text: String) -> Int {
    let words = text.split { !$0.isLetter }
    return words.count
}

func searchWord(in text: String, word: String) -> Int {
    let words = text.split { !$0.isLetter }
    return words.filter { $0.lowercased() == word.lowercased() }.count
}

func replaceWord(in text: String, oldWord: String, newWord: String) -> String {
    return text.replacingOccurrences(of: oldWord, with: newWord)
}

func main() {
    guard CommandLine.arguments.count >= 3 else {
        print("Uso: \(CommandLine.arguments[0]) <comando> <arquivo> [opções]")
        return
    }

    let command = CommandLine.arguments[1]
    let filePath = CommandLine.arguments[2]

    guard let fileContent = readFile(at: filePath) else { return }

    switch command {
    case "count":
        let wordCount = countWords(in: fileContent)
        print("Número de palavras: \(wordCount)")
    case "search":
        guard CommandLine.arguments.count == 4 else {
            print("Uso: \(CommandLine.arguments[0]) search <arquivo> <palavra>")
            return
        }
        let searchTerm = CommandLine.arguments[3]
        let occurrences = searchWord(in: fileContent, word: searchTerm)
        print("A palavra '\(searchTerm)' aparece \(occurrences) vezes.")
    case "replace":
        guard CommandLine.arguments.count == 5 else {
            print("Uso: \(CommandLine.arguments[0]) replace <arquivo> <palavra_antiga> <nova_palavra>")
            return
        }
        let oldWord = CommandLine.arguments[3]
        let newWord = CommandLine.arguments[4]
        let updatedContent = replaceWord(in: fileContent, oldWord: oldWord, newWord: newWord)
        print("Conteúdo atualizado:\n\(updatedContent)")
    default:
        print("Comando desconhecido.")
    }
}

main()
