import Foundation

func readFile(at path: String) -> String? {
    do {
        return try String(contentsOfFile: path, encoding: .utf8)
    } catch {
        print("Erro ao ler o arquivo: \(error.localizedDescription)")
        return nil
    }
}

func countWords(in text: String) -> Int {
    let words = text.split { $0.isWhitespace || $0.isNewline }
    return words.count
}

func searchWord(in text: String, word: String) -> Int {
    let words = text.split { $0.isWhitespace || $0.isNewline }
    return words.filter { $0.lowercased() == word.lowercased() }.count
}

func replaceWord(in text: String, oldWord: String, newWord: String) -> String {
    return text.replacingOccurrences(of: oldWord, with: newWord, options: .caseInsensitive)
}

func main() {
    let arguments = CommandLine.arguments
    guard arguments.count > 2 else {
        print("Uso: \(arguments[0]) <caminho_do_arquivo> <comando> [<palavra> | <palavra_antiga> <palavra_nova>]")
        return
    }
    
    let filePath = arguments[1]
    guard let fileContent = readFile(at: filePath) else { return }
    
    let command = arguments[2]
    
    switch command {
    case "count":
        let wordCount = countWords(in: fileContent)
        print("Total de palavras: \(wordCount)")
        
    case "search":
        guard arguments.count == 4 else {
            print("Uso: \(arguments[0]) <caminho_do_arquivo> search <palavra>")
            return
        }
        let searchWordArg = arguments[3]
        let count = searchWord(in: fileContent, word: searchWordArg)
        print("A palavra '\(searchWordArg)' aparece \(count) vezes.")
        
    case "replace":
        guard arguments.count == 5 else {
            print("Uso: \(arguments[0]) <caminho_do_arquivo> replace <palavra_antiga> <palavra_nova>")
            return
        }
        let oldWord = arguments[3]
        let newWord = arguments[4]
        let updatedContent = replaceWord(in: fileContent, oldWord: oldWord, newWord: newWord)
        print("Conte√∫do atualizado:\n\(updatedContent)")
        
    default:
        print("Comando desconhecido: \(command)")
    }
}

main()
